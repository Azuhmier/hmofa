#!/usr/bin/env perl
use warnings;
use strict;
use utf8;
use Data::Dumper;
#use Vi::QuickFix './quickfix';
#perl -MCarp=verbose
$SIG{__DIE__} = sub
{
    #print trace();
    $DB::single = 1;
    $DB::signal = 1;
};

use lib ($ENV{HOME}.'/progs/ohm/lib');
    use Ohm::Controller;

my $c = Ohm::Controller->new($args);
$c->genDb;
$c->db->divyInput;
$c->genWrite;
$c->validate('file');
$c->validate('struct');
print "$_\n" for $c->db->get('status','valid');

my @attrs;
for my $tag ($c->db->{matches}{tags}->@*)
{
    if (exists $tag->{attrs})
    {
        for my $attr (keys $tag->{attrs}->%*)
        {
            for my $item ($tag->{attrs}{$attr}->@*)
            {
                push @attrs, $item;
            }
        }
    }
}
print scalar @attrs,"\n";
print scalar $c->db->{matches}{url}->@*,"\n";

# Find all titles with tags that contain 'wolf'
#my $crit =
#{
#    find => ['milf','older anthro'],
#    in => ['tags'],
#    for => ['title'],
#};
#my $res = $c->find([['search',$crit]],['url']);
#print $res;
#store($c->hash, "./mydata");
#my $data = retrieve("./mydata");
#store($c, "./myobj");
#print scalar $c->db->{matches}{tags}->@*,"\n";

#$see->which($c->hash);
##open(my $fh, "| less")  # decrypt
##    or die "Can't start caesar: $!";
##print $fh $output;
##close $fh;

#use JSON::PP;
#my $js = JSON::PP->new;
#$js->canonical(1)->pretty;
#my $sorter = sub
#{
#  my @objs = $c->db->objs;
#  if ( (grep {$JSON::PP::a eq $_} @objs)[0] && (grep {$JSON::PP::b eq $_} @objs)[0])
#  {
#      if
#      (
#          $JSON::PP::a eq 'prsv'
#              ||
#          $JSON::PP::b eq 'prsv'
#      )
#      {
#          my $ret;
#          $ret = 1 if $JSON::PP::a eq 'prsv';
#          $ret = -1 if $JSON::PP::b eq 'prsv';
#          $ret;
#      }
#      else
#      {
#          $c->db->{meta}{cmp}{ $JSON::PP::a }{ $JSON::PP::b }
#      }
#  }
#  else
#  {
#      $JSON::PP::a cmp $JSON::PP::b;
#  }
#};
##my $h = $c->importJson( "./.ohm/db/smask/masterbin.json");
#my $h = $c->importJson( "./.ohm/db/sdrsr/kk.json");
#my $output = $js->sort_by($sorter)->encode($h);  
#print $output;

$DB::single = 1;
$DB::signal = 1;
