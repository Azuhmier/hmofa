--------------------------
Objective
--------------------------
- Create a program called 'ohmfa' to create, compare, and manipulate a given
  masterbin by parsing it to devlop a flatfile and then a database.

--------------------------
Goals
--------------------------
- be able to write back the masterbin
- be able to generate formatted masterbin files for uploads on site like
  rentry.org
- be able to integrate scrapping scripts/programs into the database
- relevant file data such as the flatfile, deltas, and other computation for
  masterbin separately computed with 'ohmfa' to be kept in a separate dot
  directory called '/.ohmfa' much like a '/.git' file
- implement vigour's validation methods when changing the masterbin
- using the data structure paradigm of a given masterbin, parse other files
  like the Resource Bin (GPG) and input relevant data into the database

--------------------------
Layout
--------------------------
ohmfa
./ohmfi
./ohmfa

configuration
    - dspt
    - drsr
    - sdrsr
    - mask
        - placeholder
        - smask
        - suppress

database objects
    - predefined objects
        - root
        - prsv
        - miss
    - objHash
        - childs
        - parent
        - props
        - attrs
    - object value
    - object class
    - object UID
    - objHash index UID
    - miss
    - objHash global UID
    - container object
    - group object
    - line object
    - inline object


--------------------------
Terms
--------------------------
array                          A list of values/scalars.
object attribute (attr)        Passive object information whose manipulation
                                   has no effect on the behavior of the object
                                   value or how it is treated. For example,
                                   "Part 1" in "http://storyurl.com (Part 1)".
implicit attribute (i_attr)    Attributes whose values are not generated from
                                   text using patterns specified by the user.
                                   For example, "objHash['attrs']['site'] =
                                   'ghostbin'" from
                                   "http://ghostbin.com/gmailer0".
explicit attribute (e_attr)    Attributes whose values are generated from text
                                   using patterns specified by the user For
                                   example, "s" in "s::canine"
attributing (gen_attrs())     The process of extracting attribute values from
                                   a matched line's text
child                          Any object hash whose reference can be found in
                                   another object due to hierarchical sorting
childs                         The key name of the hash located in the object
                                   hash that contains all the object hash's
                                   children.  The 'childs' hash has a key for
                                   each class of child object each contain an
                                   array of object hashes of said
class                          The objects type, that determines how an object
                                   value will be parsed, stored, and rewritten.
hierarchical sorting           The process of determening the parent-child
                                   relationship of objects using class UIDs and
                                   'Top-down heiarchy'
Top-down hierarchy             Hierarchy that is based on the line number of
                                   when the object was encounter in which
                                   objects can only have children that have a
                                   higher line number than it
configuration (config)         Also know as 'config', is the data used by
                                   'ohmfa' to determine the parsing paradigm
                                   and behavior among other things. The
                                   'config' of 'ohmfa' requires at least 3 flat
                                   files: 'dspt', 'drsr', and 'mask'. Optinal
                                   'configs' include: 'sdrs', 'smask', and
                                   'extern'
container object               An object whose match that contains an 'array'
                                   of 'delimited' child objects and must be
                                   further parsed. A 'container' object value
                                   must reconcile to an empty string and then
                                   rendered undefined. It can only have
                                   implicit attributes. For example, the anthro
                                   tag container "[canine, w::Missy]" in
                                   "[canine, w::Missy][long story, sex,
                                   freeform?]~"
database (DB)                  In the context of this project, any external
                                   paradigm used to store information. Even
                                   though a 'flat file' is a file based data
                                   base, it differs from the 'DB' in that
                                   rather than a file it's an entire software
external (extern)              Additional flat-files or txt files that 'ohmfa'
                                   can utilize. For example, the '.ohmfi' for
                                   hmofa contains the file gitio.json wich is
                                   basically a hash table of pastebin.com url
                                   IDs and their associated git.io url IDs.
options (ops)                  Input arguments affecting the behavior of 'ohmfa'
                                   through a user-friendly interface. Options
                                   can manipulate configs and/or program
                                   varabiles and parameters.
flags                          A binary type of options whose values can either
                                   be 0 or 1.
status                         Binary values repersenting the status of a myriad
                                   of process in 'ohmfa' whose values can
                                   either be 0 or 1
dispatch table (dspt)          A flat file containg the nessecary configs for
                                   parsing a masterbin. It contains the keys of
                                   all the line objects including predefined
                                   objects such as 'root', 'prsv', and 'miss'.
                                   Each key points to a hash that contains the
                                   'regexp'/'substr' value used for parsing as
                                   well as it's class index ID used for
                                   hierarchical sorting. Only line objects
                                   appear on the first level of the dpst hash,
                                   inline objects and attributes dspt hashes
                                   are only found as keys as these the dpst
                                   hashes of these line objects and other
                                   inline object dpst hashes in which are only
                                   utilized after a match was found for it's
                                   parent dspt hash where in the parser will
                                   see if there are any inline or attr keys to
                                   decide whether it should parse the match
                                   further. Only the 'dspt' flat file is needed
                                   to make a flat-file'
dresser (drsr)                 A 'flat file' used to rewrite the masterbin txt
                                   file back from the flat file. This flat file
                                   along with the dspt is required to write
                                   back the masterbin txt file and validate the
                                   parsing process
mask                           a 'flat file' used to filter or append to the
                                   flat file during the rewrite or generation
                                   process.
Supplementary dresser (sdrsr)  Exactly like the 'drsr' flat file except rather
                                   than used to rewrite and validate the
                                   masterbin, it is used to write formated
                                   masterbin files from flat file. All
                                   generated masterbin formatted files cannot
                                   be parsed back into a masterbin file.
Supplementary mask (smask)     Exactly like the 'mask' only for masterbin
                                   output files. This flat file is required
                                   along with the 'dspt' to upload to sited
                                   like rentry.
outputs                        Files generated by ohmfa. 
dressed masterbin (dfile)      A file generated using the IFL and/or the DB per
miss
                               object class of any line in the masterbin that
                                   did not return a 'match'. It's object value
                                   is the raw content of the line itself.
                                   cannot have any attributes or children and
                                   its parent will always be
                                   'smask' flat file.

ohmfa                          omni hashing masterbin file application
ohmfi                          omni hashing masterbin file instance
predefined
properties                     active object information whose manipulation has
                                   effects on the behavior of the object value
                                   or how it is treated. Example: "suppress" in
                                   objHash['props']['suppress'] = 1".
prsv                           object class of a line in the masterbin that was
                                   specified to be preserved. It's object value
                                   is the raw content of the line itself. It
                                   cannot have any  attributes or children. And
                                   it's parent will always be 'root'.
scalar                         a single value with no dimensions
----------------------------------------------------------------
input args                     The necessary user supplied configs and options
                                   needed to execute ohmfa. Once supplied, the
                                   input args are stored an 'Ohmfa::Controller'
                                   object as 'args'. Any argument not supplied
                                   will be replaced by a default value
                                   specified in the 'bpc' method of the
                                   'Ohmfa:Controller' class. This is most
                                   crucial conserning the 'paths' arguments
                                   whose 'bpc's contain default 'ohmfi'
                                   directory paths that allows the user to
                                   change and use the contents of the ohmfi
                                   directory directly through the 'paths'
                                   arguments. Any 'path' argument is a change
                                   in the 'ohmfi' directory (init), while no
                                   'paths' arguments leaves it unchanged (run).

hash                           An associated array; a dictionary.
boiler plate config (bpc)      Used by 'genconfig' and 'params_checker' to
                                     produce boiler plates that serve to
                                     construct or act as defaults for the
                                     myriad data structures used in 'ohmfa'.
                                     Each ohmfa class besides 'main' has its
                                     own 'get_bpc' method. Each key in the
                                     'get_bpc' repersents a different 'bpc'.
                                     The keys are modular so any key can be
                                     used in a bpc.
get_bpc
- start
- member
- fill
Params::Check
- default
- strict_type
- allow
boiler plate matrix (bpm)
gen_bp
genconfig
populate
merge
args
- baseDir
- status
- flags
- cwd
- paths
- opts
- args
INIT
-------------------------------------------------
unique identifier (UID)

input
db
out

use_args
ohm::Hasher
ohm::Controller
ohm::UserController
ohm::Main
init
pre_config
sweep

data::walk
new
delimitattr
checks

masterbin
match
matches
'root'.
object
object hash
parent
reference
numerical
regex parsing
root
string
substring parsing
subtraction attributing
text parsing
object value
importfrompaths
see
out
find


wobjs
uobjs
objs
dspt


gendb
getparent
getpnt
cmppnt

gen_dspt
check_dspt

init_ohmfi
seek_ohmfi
select_ohmfi

set_flags
get
set_status
imprttxt
importjson
write
base
base_dir
writejson
private

launch commands
group object
hash
index
inline
line objects
mask
intermediate flat file (IFL)
global
parser
get_match
divy_input
validater
genwrite
launch
sweep



--------------------------
Assumptions/constraints
--------------------------
- linewise
- top-down hierarchical computation
- groups and containers cannot have attributes
- no multi line objects
- regex/substr parsing
- subtraction/match attributing method
- line numbers are inconsequential
- no circular reference in the flat file

--------------------------
Current Implementation
--------------------------
FLAT FILE FORMAT: JSON
LANGUAGE: Perl
OOP?: YES


--------------------------
ToDo
--------------------------
- remove 'ohmfa' code from the 'hmofa' git repo and put it in it's own separate
  repo called 'ohmfa'
- integrate C/C++ into 'ohmfa' to greatly increase execution time
- rewrite OHMFA in Python for better community engagement
