#!/usr/bin/env perl
use warnings;
use strict;
use utf8;
use feature qw( current_sub );
use File::Basename;
use File::Path;
use JSON::XS;
use Storable qw(dclone);
use Carp qw(croak carp);
use Cwd;
use Try::Tiny;
use Data::Dumper;

$SIG{__DIE__} = sub
{
    $DB::single = 1;
    $DB::signal = 1;
};

use lib ($ENV{HOME}.'/hmofa/hmofa/code/test/lib');
use Ohm::Controller;

my $args = #{{{1
({
    paths =>
    {
        input => './output.txt',
        dspt  => './dspt_deimos.json',
        drsr  => './drsr_lib.json',
        sdrsr =>
        [
            './sdrsr_rentry.json'
        ],
        mask  => './mask_lib.json',
        smask =>
        [
            './smask_masterbin.json',
            './smask_catalog.json',
        ],
    },
    opts =>
    {
        plhd => {},
        prsv  =>
        {
            till =>
            [
                'section',
                0
            ]
        },
    },

});#}}}

my $c  = Ohm::Controller->new($args);

#my ($path) = @{ $c->seek_ohmi() };
#
#$c->select_ohmi($path);
#
#my $data = $c->importFromPaths();

#my $dbArgs = {
#    name => 'hmofa',
#    %$data,
#    $c->{opts} => $opts,
#}
#$c->{db} = $c->genDb( $dbArgs );

$DB::single = 1;
$DB::signal = 1;

#TESTS {{{
#my $test =
#[
#    #flag-value pair
#    sub { return $controller->__set_status('state', '1') },
#    sub { return $controller->get('status','state') },
#    sub { return $controller->set_flags('launch', '1') },
#    sub { return $controller->get('flags','launch') },
#    #hash
#    sub { return $controller->__set_status( {state => '2', init => '2'}) },
#    sub { return $controller->get('status','state') },
#    sub { return $controller->get('status','init') },
#    sub { return $controller->set_flags( {launch => '2', commit => '2'}) },
#    sub { return $controller->get('flags','launch') },
#    sub { return $controller->get('flags','commit') },
#
#    #ERRORS
#    sub { return '== $controller->__set_flags(...) ==' },
#    sub { return $controller->set_flags() },
#    sub { return $controller->set_flags() },
#    sub { return $controller->set_flags([0]) },
#    sub { return $controller->set_flags({ badKey => 'l'}) },
#    sub { return $controller->set_flags('badKey',1) },
#    sub { return $controller->set_flags('arg') },
#    sub { return '== $controller->__set_status(...) ==' },
#    sub { return $controller->__set_status() },
#    sub { return $controller->__set_status() },
#    sub { return $controller->__set_status([0]) },
#    sub { return $controller->__set_status({ badKey => 'l'}) },
#    sub { return $controller->__set_status('badKey',1) },
#    sub { return $controller->__set_status('arg') },
#    sub { return '== $controller->get(...) ==' },
#    sub { return $controller->get() },
#    sub { return $controller->get([0]) },
#    sub { return $controller->get('arg') },
#    sub { return $controller->get('badname', 'badkey') },
#    sub { return $controller->get('status', 'badkey') },
#    sub { return $controller->get('flags', 'badkey') },
#];

#for my $code ( @$test )
#{
#    my $error = 0;
#
#    try
#    {
#        &$code
#    }
#    catch
#    {
#        #warn "caught error: $_"; # not $@
#        $error = 1;
#        print "    $_";
#    };
#
#    print "    " . &$code . "\n" if !$error;
#} #}}}
